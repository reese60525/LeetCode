Language: Cpp
BasedOnStyle: LLVM
IndentWidth: 4
ColumnLimit: 120

AlignArrayOfStructures: Left
#Left 向左對齊
# struct test demo[] =
# {
#     {56, 23,    "hello"},
#     {-1, 93463, "world"},
#     {7,  5,     "!!"   }
# };

AlignTrailingComments: true  #註解是否要上下對齊

AllowShortBlocksOnASingleLine: "Empty"
#空括號縮成一行
# while (true) {}
# while (true) {
#     continue;
# }

AllowShortCaseLabelsOnASingleLine: false
#true
# switch (a) {
#     case 1: x = 1; break;
#     case 2: return 0;
# }
#false
# switch (a) {
#     case 1:
#         x = 1;
#         break;
#     case 2:
#         return 0;
# }

AllowShortIfStatementsOnASingleLine: Never  #不把if()和return;放同一行

Cpp11BracedListStyle: true
#true
# vector<int> x{1, 2, 3, 4};
# vector<T> x{{}, {}, {}, {}};
# f(MyMap[{composite, key}]);
# new int[3]{1, 2, 3};
#false
# vector<int> x{ 1, 2, 3, 4 };
# vector<T> x{ {}, {}, {}, {} };
# f(MyMap[{ composite, key }]);
# new int[3]{ 1, 2, 3 };

IncludeBlocks: Merge
#Regroup
# include "a.h"
# include "b.h"
#
# include <lib/main.h>
#Merge
#include "a.h"
#include "b.h"
#include <lib/main.h>
# InsertBraces: true #在控制語句（if、else、for、do和while）之後插入大括號 #不穩定!

NamespaceIndentation: All
#All
# namespace out {
#     int i;
#     namespace in {
#         int i;
#     }
# } // namespace out
#None
# namespace out {
# int i;
# namespace in {
# int i;
# }
# } // namespace out

RequiresClausePosition: WithPreceding
#WithPreceding
# template <typename T> requires C<T>
# struct Foo {
#     ...
# }
#OwnLine
# template <typename T>
#     requires C<T>
# struct Foo {
#     ...
# }

SortIncludes: CaseInsensitive
#CaseInsensitive
#include "A/B.h"
#include "A/b.h"
#include "a/b.h"
#include "B/A.h"
#include "B/a.h"

#CaseSensitive
#include "A/B.h"
#include "A/b.h"
#include "B/A.h"
#include "B/a.h"
#include "a/b.h"

SpaceBeforeCpp11BracedList: true
#true
# vector<int> {1, 2, 3};
# new int[3] {1, 2, 3};
#false
# vector<int>{1, 2, 3};
# new int[3]{1, 2, 3};

AllowShortLambdasOnASingleLine: Empty
#Empty
# auto lambda = [](int a) {};
# auto lambda2 = [](int a) {
#     return a;
# };
#
#All
#auto lambda = [](int a) {};
#auto lambda2 = [](int a) { return a; };

BreakBeforeBraces: Custom
BraceWrapping:
    BeforeCatch: true
    BeforeElse: true
    BeforeWhile: true

#BeforeWhile
#true
#do {
#  foo();
#}
#while (1);
#false
#do {
#  foo();
#} while (1);

#BeforeElse
#true
#if (foo()) {
#}
#else {
#}
#false
#if (foo()) {
#} else {
#}

#BeforeCatch
#true
#try {
#  foo();
#}
#catch () {
#}
#false
#try {
#  foo();
#} catch () {
#}

AlwaysBreakTemplateDeclarations: Yes

#Yes
#template <typename T>
#T foo() {
#}
#template <typename T>
#T foo(int aaaaaaaaaaaaaaaaaaaaa,
#      int bbbbbbbbbbbbbbbbbbbbb) {
#}
#No
#template <typename T> T foo() {}
#template <typename T> T foo(int aaaaaaaaaaaaaaaaaaaaa, int bbbbbbbbbbbbbbbbbbbbb) {}

#ture: switch的case會縮排，false: case不縮排
IndentCaseLabels : true

IndentExternBlock: Indent
#Indent
#extern "C" {
#    void foo();
#}
#NoIndent
#extern "C" {
#void foo();
#}

AllowShortFunctionsOnASingleLine: Empty
#None
#class Foo {
#    void f() {
#        foo();
#    }
#};
#void f() {
#    foo();
#}
#void f() {
#}
#InlineOnly
#class Foo {
#    void f() { foo(); }
#};
#void f() {
#    foo();
#}
#void f() {
#}
#Empty
#class Foo {
#    void f() {
#        foo();
#    }
#};
#void f() {
#    foo();
#}
#void f() {}